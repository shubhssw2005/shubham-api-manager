name: Ultra C++ CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-22.04
    
    strategy:
      matrix:
        build_type: [Debug, Release]
        compiler: [gcc-11, clang-14]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential cmake ninja-build \
          libdpdk-dev libnuma-dev \
          pkg-config python3-pip \
          clang-tidy cppcheck \
          valgrind
    
    - name: Setup compiler
      run: |
        if [[ "${{ matrix.compiler }}" == "clang-14" ]]; then
          sudo apt-get install -y clang-14
          echo "CC=clang-14" >> $GITHUB_ENV
          echo "CXX=clang++-14" >> $GITHUB_ENV
        else
          sudo apt-get install -y gcc-11 g++-11
          echo "CC=gcc-11" >> $GITHUB_ENV
          echo "CXX=g++-11" >> $GITHUB_ENV
        fi
    
    - name: Install Conan
      run: |
        pip3 install conan==2.0.13
        conan profile detect --force
    
    - name: Cache Conan packages
      uses: actions/cache@v3
      with:
        path: ~/.conan2
        key: conan-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ hashFiles('conanfile.py') }}
    
    - name: Install dependencies
      run: |
        conan install . --build=missing -s build_type=${{ matrix.build_type }}
    
    - name: Configure CMake
      run: |
        if [[ "${{ matrix.build_type }}" == "Debug" ]]; then
          cmake --preset conan-debug
        else
          cmake --preset conan-release
        fi
    
    - name: Build
      run: |
        cmake --build --preset conan-${{ matrix.build_type }} -j$(nproc)
    
    - name: Run tests
      run: |
        cd build/${{ matrix.build_type }}
        ctest --output-on-failure --parallel $(nproc)
    
    - name: Run static analysis (Release only)
      if: matrix.build_type == 'Release'
      run: |
        # Run clang-tidy
        find src -name "*.cpp" | xargs clang-tidy-14 -- -Iinclude
        
        # Run cppcheck
        cppcheck --enable=all --inconclusive --std=c++20 src/ include/
    
    - name: Memory check (Debug only)
      if: matrix.build_type == 'Debug'
      run: |
        cd build/Debug
        valgrind --tool=memcheck --leak-check=full --error-exitcode=1 ./bin/unit_tests

  docker-build:
    runs-on: ubuntu-22.04
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t ultra-cpp:${{ github.sha }} .
    
    - name: Test Docker image
      run: |
        docker run --rm ultra-cpp:${{ github.sha }} --version

  performance-benchmark:
    runs-on: ubuntu-22.04
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential cmake ninja-build \
          libdpdk-dev libnuma-dev \
          pkg-config python3-pip
        pip3 install conan==2.0.13
        conan profile detect --force
    
    - name: Build release
      run: |
        conan install . --build=missing -s build_type=Release
        cmake --preset conan-release
        cmake --build --preset conan-release -j$(nproc)
    
    - name: Run benchmarks
      run: |
        cd build/Release
        ./bin/benchmark_tests --benchmark_format=json > benchmark_results.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: build/Release/benchmark_results.json