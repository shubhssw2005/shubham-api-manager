replicaCount: 2

image:
  repository: your-ecr-repo/media-service
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT:role/media-service-role
  name: ""

podAnnotations:
  sidecar.istio.io/inject: "true"
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/metrics"

podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  targetPort: 8080

resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 1000m
    memory: 2Gi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  customMetrics:
    - type: Pods
      pods:
        metric:
          name: sqs_messages_visible
        target:
          type: AverageValue
          averageValue: "10"
  
  # Vertical Pod Autoscaler
  verticalPodAutoscaler:
    enabled: true
    updateMode: "Auto"
    minAllowed:
      cpu: "200m"
      memory: "256Mi"
    maxAllowed:
      cpu: "4000m"
      memory: "8Gi"

nodeSelector:
  workload-type: media-processing

tolerations:
  - key: "workload-type"
    operator: "Equal"
    value: "media-processing"
    effect: "NoSchedule"

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - media-service
        topologyKey: kubernetes.io/hostname

podDisruptionBudget:
  enabled: true
  minAvailable: 1

env:
  - name: GO_ENV
    value: "production"
  - name: PORT
    value: "8080"
  - name: AWS_REGION
    value: "us-east-1"
  - name: S3_BUCKET
    valueFrom:
      configMapKeyRef:
        name: media-config
        key: s3-bucket
  - name: SQS_QUEUE_URL
    valueFrom:
      configMapKeyRef:
        name: media-config
        key: sqs-queue-url
  - name: REDIS_URL
    valueFrom:
      secretKeyRef:
        name: redis-secret
        key: url

livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health/ready
    port: http
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

istio:
  enabled: true
  virtualService:
    enabled: true
    gateways:
      - istio-system/media-gateway
    hosts:
      - media.company.com
    http:
      - match:
        - uri:
            prefix: /media/v1
        route:
        - destination:
            host: media-service
            port:
              number: 80
        timeout: 300s
        retries:
          attempts: 2
          perTryTimeout: 150s
  destinationRule:
    enabled: true
    trafficPolicy:
      tls:
        mode: ISTIO_MUTUAL
      connectionPool:
        tcp:
          maxConnections: 50
        http:
          http1MaxPendingRequests: 25
          maxRequestsPerConnection: 5
      circuitBreaker:
        consecutiveErrors: 3
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50