name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            npm-audit.json
            snyk-results.json

  container-scan:
    name: Container Image Security Scan
    runs-on: ubuntu-latest
    needs: dependency-scan
    
    strategy:
      matrix:
        service: [api-service, media-service, worker-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -f docker/${{ matrix.service }}.Dockerfile -t ${{ matrix.service }}:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.service }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        id: grype-scan
        with:
          image: '${{ matrix.service }}:${{ github.sha }}'
          fail-build: false
          severity-cutoff: high

      - name: Tag and push image to ECR
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag ${{ matrix.service }}:${{ github.sha }} $ECR_REGISTRY/strapi-platform/production/${{ matrix.service }}:${{ github.sha }}
          docker tag ${{ matrix.service }}:${{ github.sha }} $ECR_REGISTRY/strapi-platform/production/${{ matrix.service }}:latest
          docker push $ECR_REGISTRY/strapi-platform/production/${{ matrix.service }}:${{ github.sha }}
          docker push $ECR_REGISTRY/strapi-platform/production/${{ matrix.service }}:latest

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload container scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-scan-results-${{ matrix.service }}
          path: |
            trivy-results-${{ matrix.service }}.sarif
            ${{ steps.grype-scan.outputs.sarif }}

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Run Checkov security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true

      - name: Run tfsec security scan
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        with:
          sarif_file: tfsec-results.sarif
          working_directory: terraform/

      - name: Upload Checkov scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Upload tfsec scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: tfsec-results.sarif

      - name: Upload infrastructure scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: infrastructure-scan-results
          path: |
            checkov-results.sarif
            tfsec-results.sarif

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, infrastructure-scan]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: scan-results/

      - name: Generate security report
        run: |
          cat > security-report.md << 'EOF'
          # Security Scan Report
          
          **Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          ## Summary
          
          This report contains the results of automated security scans performed on:
          - Dependencies (npm audit, Snyk)
          - Container images (Trivy, Grype)
          - Infrastructure code (Checkov, tfsec)
          
          ## Scan Results
          
          ### Dependency Scan
          - npm audit results available in artifacts
          - Snyk scan results available in artifacts
          
          ### Container Image Scan
          - Trivy vulnerability scan results uploaded to GitHub Security tab
          - Grype scan results available in artifacts
          
          ### Infrastructure Scan
          - Checkov security scan results uploaded to GitHub Security tab
          - tfsec scan results uploaded to GitHub Security tab
          
          ## Recommendations
          
          1. Review all HIGH and CRITICAL severity vulnerabilities
          2. Update dependencies with known vulnerabilities
          3. Address infrastructure security issues identified by Checkov and tfsec
          4. Monitor ECR scan results in AWS Console
          
          ## Next Steps
          
          - [ ] Review scan results in GitHub Security tab
          - [ ] Address critical and high severity issues
          - [ ] Update security policies if needed
          - [ ] Schedule follow-up scans
          
          EOF

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ”’ Security Scan Results\n\n${report}\n\n*Detailed results are available in the GitHub Security tab and workflow artifacts.*`
            });

  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, infrastructure-scan]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          text: |
            ðŸš¨ Security scan failed for ${{ github.repository }}
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Workflow:** ${{ github.workflow }}
            
            Please review the scan results and address any critical vulnerabilities.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}